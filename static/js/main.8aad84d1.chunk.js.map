{"version":3,"sources":["api/searchArtists.tsx","components/Button.tsx","components/TextInput.tsx","components/Form.tsx","api/getArtistInfo.tsx","components/Card.tsx","components/Results.tsx","components/Info.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["searchArtists","searchTerm","callback","a","fetch","process","then","response","json","data","StyledButton","styled","button","Button","className","id","type","onClick","name","disabled","Input","input","TextInput","placeholder","value","onChange","e","target","Form","React","textValue","setTextValue","handleSubmit","preventDefault","onSubmit","getArtistInfo","CardDiv","div","P","p","Card","cardContent","HorizontalDiv","Results","content","results","artistmatches","artist","map","result","index","InfoDiv","A","formatContent","string","subString","substr","Math","min","length","lastIndexOf","concat","Info","bio","href","links","link","RootDiv","App","searchResults","setSearchResults","artistInfo","setArtistInfo","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8aad84d1.chunk.js","sourcesContent":["export const searchArtists = async (searchTerm: string, callback: Function) => {\n  await fetch(\n    `http://ws.audioscrobbler.com/2.0/?method=artist.search&artist=${searchTerm}&api_key=${process.env.REACT_APP_APIKEY}&format=json`\n  )\n    .then(response => response.json())\n    .then(data => callback(data))\n}\n","import * as React from 'react'\nimport styled from 'styled-components'\n\ntype ButtonProps = {\n  className?: string,\n  id?: string,\n  type?: string,\n  onClick: React.MouseEventHandler,\n  disabled?: boolean\n} & React.ButtonHTMLAttributes<HTMLButtonElement>\n\nconst StyledButton = styled.button`\n  font-size: calc(10px + 2vmin);\n`\n\nexport const Button = ({ className, id, type, onClick, name, disabled }: ButtonProps) => {\n  return (\n    <StyledButton\n      id={id}\n      className={className}\n      name={name}\n      type={type}\n      onClick={onClick}\n      disabled={disabled}\n    >\n      {' '}\n      {name}\n    </StyledButton>\n  )\n}\n","import * as React from 'react'\nimport styled from 'styled-components'\n\nconst Input = styled.input`\n  font-size: calc(10px + 2vmin);\n`\n\ntype TextInputProps = {\n  id?: string,\n  className?: string,\n  name?: string,\n  placeholder?: string,\n  value?: string,\n  onChange: Function\n}\n\nexport const TextInput = ({\n  id,\n  className,\n  name,\n  placeholder,\n  value,\n  onChange\n}: TextInputProps) => {\n  function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n    onChange(e.target.value)\n  }\n  return (\n    <Input\n      id={id}\n      className={className}\n      name={name}\n      placeholder={placeholder}\n      value={value}\n      onChange={handleChange}\n    />\n  )\n}\n","import * as React from 'react'\nimport { searchArtists } from '../api/searchArtists'\nimport { Button } from './Button'\nimport { TextInput } from './TextInput'\n\ntype FunctionProps = {\n  callback: any\n}\n\nexport const Form = ({ callback }: FunctionProps) => {\n  const [textValue, setTextValue] = React.useState('')\n\n  function handleSubmit(e: React.FormEvent) {\n    e.preventDefault()\n    searchArtists(textValue, callback)\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <TextInput\n        id={'last-fm-search-input'}\n        className={'search'}\n        placeholder={'Pitbull'}\n        value={textValue}\n        onChange={setTextValue}\n      />{' '}\n      <Button\n        id={'submit-button'}\n        type={'submit'}\n        name={'Click to search'}\n        onClick={handleSubmit}\n        disabled={textValue === '' ? true : false}\n      />\n    </form>\n  )\n}\n","export const getArtistInfo = async (searchTerm: string, callback: Function) => {\n  await fetch(\n    `http://ws.audioscrobbler.com/2.0/?method=artist.getInfo&artist=${searchTerm}&api_key=${process.env.REACT_APP_APIKEY}&format=json`\n  )\n    .then(response => response.json())\n    .then(data => callback(data))\n}\n","import * as React from 'react'\nimport styled from 'styled-components'\nimport { getArtistInfo } from '../api/getArtistInfo'\nimport { Button } from './Button'\n\nconst CardDiv = styled.div`\n  color: white;\n  text-decoration: none;\n  padding: 0 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n`\n\nconst P = styled.p`\n  text-align: center;;\n  min-width: 17rem;\n  white-space: nowrap;\n`\n\ntype CardProps = {\n  cardContent: any\n  callback: Function\n}\n\nexport const Card = ({ cardContent, callback }: CardProps) => {\n  const handleClick = () => {\n    getArtistInfo(cardContent.name, callback)\n  }\n\n  return (\n    <CardDiv>\n      <P>{cardContent.name}</P>\n      <Button onClick={handleClick} name={'Show more'} />\n    </CardDiv>\n  )\n}\n","import * as React from 'react'\nimport styled from 'styled-components'\nimport { Card } from './Card'\n\nconst HorizontalDiv = styled.div`\n  display: flex;\n  width: 100%;\n  overflow: auto;\n  margin: 10px;\n`\n\ntype ResultsProps = {\n  content: any,\n  callback: any\n}\n\nexport const Results = ({ content, callback }: ResultsProps) => {\n  return (\n    <>\n      <p>Click on any of the artists below to learn more about them</p>\n      <HorizontalDiv>\n        {content.results.artistmatches.artist.map((result: string, index: number) => (\n          <Card callback={callback} cardContent={result} key={index} />\n        ))}\n      </HorizontalDiv>\n    </>\n  )\n}\n","import * as React from 'react'\nimport styled from 'styled-components'\n\nconst InfoDiv = styled.div`\n  width: 100%;\n`\n\nconst A = styled.a`\n  text-decoration: none;\n  color: white;\n  text-align: center;\n  display: block;\n`\n\nconst formatContent = (string: string) => {\n  const subString = string.substr(0, 250)\n  // Use this to format string without truncating words\n  const formattedString = subString.substr(\n    0,\n    Math.min(subString.length, subString.lastIndexOf(' '))\n  )\n  return formattedString.concat('...')\n}\n\ninterface contentObj {\n  content: any\n}\n\nexport const Info = ({ content }: contentObj) => {\n  const { artist } = content\n  return (\n    <InfoDiv>\n      <h3>Info for {artist.name}</h3>\n      <p>{formatContent(artist.bio.content)}</p>\n      <A href={artist.bio.links.link.href} target={'_blank'}>\n        Click here to learn more about {artist.name}\n      </A>\n    </InfoDiv>\n  )\n}\n","import * as React from 'react'\nimport { Form } from './components/Form'\nimport { Results } from './components/Results'\nimport { Info } from './components/Info'\nimport styled from 'styled-components'\n\nconst RootDiv = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: white;\n`\n\nfunction App () {\n\n  const [searchResults, setSearchResults] = React.useState(null)\n  const [artistInfo, setArtistInfo] = React.useState(null)\n  return (\n    <RootDiv className='App'>\n      <h1>ma-last-fm</h1>\n      <h2>An app for searching last-fm</h2>\n      <p>Type an artist name below to get started</p>\n      <Form callback={setSearchResults} />\n      {searchResults !== null ? <Results callback={setArtistInfo} content={searchResults} /> : ''}\n      {artistInfo !== null ? <Info content={artistInfo} /> : ''}\n    </RootDiv>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}